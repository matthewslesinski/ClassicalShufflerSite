@inject ISpotifyService spotifyProvider
@inject ISpotifyAccountAuthenticator spotifyAuthenticator
@page "/shuffle"


    <PageTitle>Shuffler</PageTitle>

    @if (!spotifyAuthenticator.IsLoggedIn)
    {
        <h3>You are not logged in to Spotify. Please log in before proceeding</h3>
    }
    else
    {
        <h1>Shuffle your playback</h1>
        <button class="btn btn-primary" @onclick="ShufflePlayback">Shuffle</button>
        if (_mostRecentResult.HasValue)
        {
            <div>Most recent finished result: @(_mostRecentResult.Value ? "Success" : "Fail")</div>
        }
    }

    @code {

        private bool? _mostRecentResult = null;
        private async Task ShufflePlayback()
        {
            var playbackReorderer = new SpotifyPlaybackReorderer(spotifyProvider.Client);
            _mostRecentResult = await playbackReorderer.ShuffleCurrentPlayback();
        }

    }