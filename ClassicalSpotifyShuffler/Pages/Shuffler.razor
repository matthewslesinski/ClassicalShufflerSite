@inject ISpotifyService spotifyProvider
@inject ISpotifyAccountAuthenticator spotifyAuthenticator
@inject IUserInterface ui
@implements IDisposable
@page "/shuffle"


<PageTitle>Shuffler</PageTitle>

@if (!spotifyAuthenticator.IsLoggedIn)
{
    <h3>You are not logged in to Spotify. Please log in before proceeding</h3>
}
else
{
    <h1>Shuffle your playback</h1>
    <div style="width: 400px; overflow-x: scroll; border: inset; border-radius: 10px" tabindex="-1">
        @foreach (var context in contextsToDisplay)
        {
            @if (Equals(context.UnderlyingUri, _selectedContext?.UnderlyingUri) && Equals(context.ContextType, _selectedContext?.ContextType))
            {
                <div style="background:yellow">@ToDisplayTitle(context)</div>
            }
            else
            {
                <div @onclick="() => _selectedContext = context">@ToDisplayTitle(context)</div>
            }
        }
    </div>
    <h5>Albums</h5>
    <div style="height: 500px; width: 400px; overflow-y: scroll; overflow-x: scroll; border: inset; border-radius: 10px" tabindex="-1">
        <Virtualize Context="context" ItemsProvider="(request) => LoadItems<SavedAlbum, AlbumContextDisplay>(_albums, (album) => new AlbumContextDisplay(album), request)"
                    OverscanCount="50" ItemSize="50">
            @if (Equals(context.UnderlyingUri, _selectedContext?.UnderlyingUri) && Equals(context.ContextType, _selectedContext?.ContextType))
            {
                <div style="background:yellow; white-space:nowrap">
                    <div>@ToDisplayTitle(context)</div>
                    <font size="-1">@context.Caption</font>
                </div>
            }
            else
            {
                <div style="white-space: nowrap" @onclick="() => _selectedContext = context">
                    <div>@ToDisplayTitle(context)</div>
                    <font size="-1">@context.Caption</font>
                </div>
            }
        </Virtualize>
    </div>
    <h5>Playlists</h5>
    <div style="height: 500px; width: 400px; overflow-y: scroll; overflow-x: scroll; border: inset; border-radius: 10px" tabindex="-1">
        <Virtualize Context="context" ItemsProvider="(request) => LoadItems<SimplePlaylist, PlaylistContextDisplay>(_playlists, (playlist) => new PlaylistContextDisplay(playlist), request)"
                    OverscanCount="50">
            @if (Equals(context.UnderlyingUri, _selectedContext?.UnderlyingUri) && Equals(context.ContextType, _selectedContext?.ContextType))
            {
                <div style="background:yellow; white-space:nowrap">
                    <div>@ToDisplayTitle(context)</div>
                    <font size="-1">@context.Caption</font>
                </div>
            }
            else
            {
                <div style="white-space: nowrap" @onclick="() => _selectedContext = context">
                    <div>@ToDisplayTitle(context)</div>
                    <font size="-1">@context.Caption</font>
                </div>
            }
        </Virtualize>
    </div>

    @if (_selectedContext != null)
    {
        <button class="btn btn-primary" @onclick="ShufflePlayback">Shuffle</button>
        if (_mostRecentResult.HasValue)
        {
            <div>Most recent finished result: @(_mostRecentResult.Value ? "Success" : "Fail")</div>
        }
    }
}

@code {

    private bool? _mostRecentResult = null;
    private List<ISpotifyItemDisplay> contextsToDisplay = new();
    private ISpotifyItemDisplay? _selectedContext = null;
    private SavedAlbumsCache _albums = new SavedAlbumsCache(loadType: LoadType.PartiallyOnInitialization);
    private SavedPlaylistsCache _playlists = new SavedPlaylistsCache(loadType: LoadType.PartiallyOnInitialization);
    private readonly CancellationTokenSource _pageTaskCancellation = new CancellationTokenSource();

    private async Task ShufflePlayback()
    {
        if (_selectedContext == null)
        {
            ui.NotifyUser("Cannot shuffle when nothing is selected");
            return;
        }
        var executor = new SpotifyCommandExecutor(spotifyProvider.Client);
        _mostRecentResult = await (_selectedContext.ContextType.HasValue && SpotifyDependentUtils.TryParseSpotifyUri(_selectedContext.UnderlyingUri, out _, out var id, out _ )
            ? executor.ModifyContext(_selectedContext.ContextType.Value, id)
            : executor.ModifyContext(_selectedContext.UnderlyingUri)).WithoutContextCapture();
    }

    protected override async Task OnInitializedAsync()
    {
        if (!spotifyAuthenticator.IsLoggedIn)
            await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture();
        if (spotifyAuthenticator.IsLoggedIn)
        {
            contextsToDisplay.Add(new AllLikedTracksContextDisplay());
            var currentlyPlaying = await spotifyProvider.SpotifyConfiguration.GetCurrentlyPlaying().WithoutContextCapture();
            if (currentlyPlaying?.Item != null)
            {
                contextsToDisplay.AddRange(await GetCurrentlyPlayingContexts(currentlyPlaying).WithoutContextCapture());
            }
        }
    }

    private async Task<IEnumerable<ISpotifyItemDisplay>> GetCurrentlyPlayingContexts(CurrentlyPlaying? currentlyPlaying = null)
    {
        currentlyPlaying ??= await spotifyProvider.SpotifyConfiguration.GetCurrentlyPlaying().WithoutContextCapture();
        var contexts = new List<ISpotifyItemDisplay>();
        if (currentlyPlaying?.Item != null)
        {
            if (currentlyPlaying.Context != null)
            {
                var didParse = SpotifyDependentUtils.TryParseSpotifyUri(currentlyPlaying.Context.Uri, out var type, out var id, out var allParts);
                if (didParse)
                {
                    var typeEnum = Enum.TryParse<PlaybackContextType>(type, true, out var result) ? result : (PlaybackContextType?)null;
                    contexts.Add(new MiscContextDisplay("Current Playback", currentlyPlaying.Context.Uri, $"{(typeEnum.HasValue ? $"Current context type: {typeEnum}" : "")}", typeEnum));
                }
            }
        }
        return contexts;
    }

    private async ValueTask<ItemsProviderResult<ContextT>> LoadItems<ItemT, ContextT>(IQueryCache<ItemT> cache, Func<ItemT, ContextT> displayCreator, ItemsProviderRequest request)
        where ContextT : ISpotifyItemDisplay
    {
        var items = await cache.GetSubsequence(request.StartIndex, request.Count, _pageTaskCancellation.Token).WithoutContextCapture();
        var totalCount = await cache.GetTotalCount(_pageTaskCancellation.Token).WithoutContextCapture();
        return new ItemsProviderResult<ContextT>(items.Select(displayCreator), totalCount);
    }

    private static string ToDisplayTitle(ISpotifyItemDisplay item) => $"{(item.ContextType.HasValue ? item.ContextType.Value + ": " : "")}{item.Title}";

    private void Select(ISpotifyItemDisplay context) => _selectedContext = context;

    public void Dispose() => _pageTaskCancellation.Cancel();
}