@inject ISpotifyAccountAuthenticator spotifyAuthenticator
@inject ISpotifyService spotifyProvider
@inject IUserInterface ui
@inject IDataStoreAccessor files
@inject NavigationManager navManager 
@page "/account"

<PageTitle>Account Management</PageTitle>

<h1>Account Management</h1>


@if (!isLoggedIn)
{
    <h3>You are not logged in to Spotify</h3>

    <button class="btn btn-primary" @onclick="LogIn">Log In</button>

}
else
{
    <h1>Username: @username</h1>

    <button class="btn btn-primary" @onclick="LogOut">Log Out</button>
}


@code {
    private bool isLoggedIn = false;
    private string? username = null;


    private async Task LogIn()
    {
        try
        {
            if ((await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture()).Success)
            {
                RefreshState();
                return;
            }
            var temporarySourceKey = Settings.Get<string>(SpotifySettings.TemporaryAuthorizationInfoKey);
            var (informationWasRequested, clientInfo, redirectUri) = await GetLogInPrerequisites().WithoutContextCapture();
            var authSource = new AuthorizationSource { ClientInfo = clientInfo, RedirectUriString = redirectUri, Scopes = SpotifyConstants.AllAuthenticationScopes };
            if (informationWasRequested)
                await files.SaveAsync(temporarySourceKey, authSource.ToJsonString(), CachePolicy.AlwaysPreferCache).WithoutContextCapture();

            await spotifyAuthenticator.LogIn(authSource);
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging in: {exception}", e);
            throw;
        }
    }

    private async Task LogOut()
    {
        try
        {
            await spotifyAuthenticator.LogOut().WithoutContextCapture();
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging out: {exception}", e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!(await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture()).Success)
            await TryLogInFromCode().WithoutContextCapture();

        RefreshState();
    }

    private async Task<(bool informationWasRequested, ClientInfo clientInfo, string redirectUri)> GetLogInPrerequisites()
    {
        var clientInfoFileKeyFound = TaskParameters.TryGet<string>(SpotifyParameters.ClientInfoPath, out var clientInfoPath);
        var redirectUri = navManager.Uri;
        ClientInfo clientInfo;
        Result<string> clientInfoResult = Result<string>.NotFound;
        ClientInfo deserializedInfo;
        if (clientInfoFileKeyFound && (clientInfoResult = await files.TryGetAsync(clientInfoPath, CachePolicy.PreferActual).WithoutContextCapture()).DidFind
            && (deserializedInfo = clientInfoResult.ResultValue.FromJsonString<ClientInfo>()).AuthType == TaskParameters.Get<AuthenticationType>(SpotifyParameters.AuthenticationType))
        {
            clientInfo = deserializedInfo;
        }
        else
        {
            var clientId = Settings.TryGet<string>(SpotifySettings.ClientId, out var foundId) ? foundId : await ui.RequestResponseAsync("Please provide the client ID").WithoutContextCapture();
            var authType = TaskParameters.Get<AuthenticationType>(SpotifyParameters.AuthenticationType);
            var clientSecret = authType switch
            {
                AuthenticationType.AuthorizationCodeFlow => await ui.RequestResponseAsync("Please provide the client secret").WithoutContextCapture(),
                AuthenticationType.PKCE => PKCEUtil.GenerateCodes().verifier,
                _ => throw new NotImplementedException("Can't handle unknown authentication types")
            };

            clientInfo = new ClientInfo
            {
                AuthType = authType,
                ClientId = clientId,
                ClientSecret = clientSecret
            };
        }
        return (!clientInfoResult.DidFind, clientInfo, redirectUri);
    }

    private async Task TryLogInFromCode()
    {
        var uriBuilder = new UriBuilder(navManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        var code = q["code"];
        if (code != null)
        {
            var clientInfoFileKeyFound = TaskParameters.TryGet<string>(SpotifyParameters.ClientInfoPath, out var clientInfoPath);
            var temporarySourceKey = Settings.Get<string>(SpotifySettings.TemporaryAuthorizationInfoKey);
            Result<string> foundTemporarySource = Result<string>.None;
            Result<string> clientInfoResult;
            ClientInfo? clientInfo = null;
            string? redirectUri = null;
            if (clientInfoFileKeyFound && (clientInfoResult = await files.TryGetAsync(clientInfoPath, CachePolicy.PreferActual).WithoutContextCapture()).DidFind
                && (redirectUri = navManager.GetUriWithQueryParameter("code", (string?) null)) != null)
            {
                clientInfo = clientInfoResult.ResultValue.FromJsonString<ClientInfo>();
            }
            else if ((foundTemporarySource = await files.TryGetAsync(temporarySourceKey, CachePolicy.AlwaysPreferCache).WithoutContextCapture()).DidFind)
            {
                var source = foundTemporarySource.ResultValue.FromJsonString<AuthorizationSource>();
                clientInfo = source.ClientInfo;
                redirectUri = source.RedirectUriString;
                await files.SaveAsync(temporarySourceKey, null, CachePolicy.AlwaysPreferCache).WithoutContextCapture();
            }
            else
            {
                throw new ArgumentNullException("Attempting to log in with an authorization code but client information was not found", redirectUri == null ? nameof(redirectUri) : "clientInfo");
            }
            var authSource = new AuthorizationSource { ClientInfo = clientInfo, RedirectUriString = redirectUri, Scopes = SpotifyConstants.AllAuthenticationScopes };
            if (redirectUri != null && clientInfo != null && (await spotifyAuthenticator.LogIn(authSource).WithoutContextCapture()).Success)
            {
                if (clientInfoFileKeyFound && foundTemporarySource.DidFind)
                    await files.SaveAsync(clientInfoPath, authSource.ClientInfo.ToJsonString(), CachePolicy.PreferActual).WithoutContextCapture();
                navManager.NavigateTo(navManager.GetUriWithQueryParameter("code", (string?)null), false);
            }
        }
    }

    private void RefreshState()
    {
        isLoggedIn = spotifyAuthenticator.IsLoggedIn;
        username = spotifyProvider.CachedUserInfo?.DisplayName;
    }
}