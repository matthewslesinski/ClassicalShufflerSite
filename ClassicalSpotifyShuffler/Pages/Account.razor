@inject ISpotifyAccountAuthenticator spotifyAuthenticator
@inject ISpotifyService spotifyProvider
@inject IUserInterface ui
@inject IDataStoreAccessor files
@inject NavigationManager navManager 
@page "/account"

<PageTitle>Account Management</PageTitle>

<h1>Account Management</h1>


@if (!isLoggedIn)
{
    <h3>You are not logged in to Spotify</h3>

    <button class="btn btn-primary" @onclick="LogIn">Log In</button>

}
else
{
    <h1>Username: @username</h1>

    <button class="btn btn-primary" @onclick="LogOut">Log Out</button>
}


@code {
    private bool isLoggedIn = false;
    private string? username = null;


    private async Task LogIn()
    {
        try
        {
            if ((await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture()).Success)
            {
                RefreshState();
                return;
            }
            var temporarySourceKey = Settings.Get<string>(SpotifySettings.TemporaryAuthorizationInfoKey);
            var clientInfoFileKeyFound = TaskParameters.TryGet<string>(SpotifyParameters.ClientInfoPath, out var clientInfoPath);
            ClientInfo clientInfo;
            Result<string> clientInfoResult = Result<string>.NotFound;
            if (clientInfoFileKeyFound && (clientInfoResult = await files.TryGetAsync(clientInfoPath, CachePolicy.PreferActual).WithoutContextCapture()).DidFind)
            {
                clientInfo = clientInfoResult.ResultValue.FromJsonString<ClientInfo>();
            }
            else
            {
                var clientId = await ui.RequestResponseAsync("Please provide the client ID").WithoutContextCapture();
                var clientSecret = await ui.RequestResponseAsync("Please provide the client secret").WithoutContextCapture();
                clientInfo = new ClientInfo { ClientId = clientId, ClientSecret = clientSecret };
            }
            var redirectUriFound = TaskParameters.TryGet<string>(SpotifyParameters.RedirectUri, out var redirectUri);
            if (!redirectUriFound)
                redirectUri = await ui.RequestResponseAsync("Please provide the redirect Uri").WithoutContextCapture();
            var authSource = new AuthorizationSource { ClientInfo = clientInfo, RedirectUriString = redirectUri, Scopes = SpotifyConstants.AllAuthenticationScopes };
            if (!clientInfoResult.DidFind)
                await files.SaveAsync(temporarySourceKey, authSource.ToJsonString(), CachePolicy.AlwaysPreferCache).WithoutContextCapture();

            await spotifyAuthenticator.LogIn(authSource);
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging in: {exception}", e);
            throw;
        }
    }

    private async Task LogOut()
    {
        try
        {
            await spotifyAuthenticator.LogOut().WithoutContextCapture();
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging out: {exception}", e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!(await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture()).Success)
        {
            var uriBuilder = new UriBuilder(navManager.Uri);
            var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
            var code = q["code"];
            if (code != null)
            {
                var clientInfoFileKeyFound = TaskParameters.TryGet<string>(SpotifyParameters.ClientInfoPath, out var clientInfoPath);
                var temporarySourceKey = Settings.Get<string>(SpotifySettings.TemporaryAuthorizationInfoKey);
                Result<string> foundTemporarySource;
                Result<string> clientInfoResult;
                ClientInfo? clientInfo = null;
                string? redirectUri = null;
                if (clientInfoFileKeyFound && (clientInfoResult = await files.TryGetAsync(clientInfoPath, CachePolicy.PreferActual).WithoutContextCapture()).DidFind
                    && TaskParameters.TryGet<string>(SpotifyParameters.RedirectUri, out redirectUri))
                {
                    clientInfo = clientInfoResult.ResultValue.FromJsonString<ClientInfo>();
                }
                else if ((foundTemporarySource = await files.TryGetAsync(temporarySourceKey, CachePolicy.AlwaysPreferCache).WithoutContextCapture()).DidFind)
                {
                    var source = foundTemporarySource.ResultValue.FromJsonString<AuthorizationSource>();
                    clientInfo = source.ClientInfo;
                    redirectUri = source.RedirectUriString;
                    await files.SaveAsync(temporarySourceKey, null, CachePolicy.AlwaysPreferCache).WithoutContextCapture();
                }
                if (redirectUri != null && clientInfo != null)
                {
                    var authSource = new AuthorizationSource { ClientInfo = clientInfo, RedirectUriString = redirectUri, Scopes = SpotifyConstants.AllAuthenticationScopes };
                    if ((await spotifyAuthenticator.LogIn(authSource).WithoutContextCapture()).Success)
                        navManager.NavigateTo(navManager.GetUriWithQueryParameter("code", (string?) null), false);
                }


            }
        }

        RefreshState();
    }

    private void RefreshState()
    {
        isLoggedIn = spotifyAuthenticator.IsLoggedIn;
        username = spotifyProvider.CachedUserInfo?.DisplayName;
    }

}

