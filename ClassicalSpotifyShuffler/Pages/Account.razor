@inject ISpotifyAccountAuthenticator spotifyAuthenticator
@inject ISpotifyService spotifyProvider
@inject IUserInterface ui
@inject IDataStoreAccessor files
@page "/account"

<PageTitle>Account Management</PageTitle>

<h1>Account Management</h1>


@if (!isLoggedIn)
{
    <h3>You are not logged in to Spotify</h3>

    <button class="btn btn-primary" @onclick="LogIn">Log In</button>

}
else
{
    <h1>Username: @username</h1>

    <button class="btn btn-primary" @onclick="LogOut">Log Out</button>
}


@code {
    private bool isLoggedIn = false;
    private string? username = null;


    private async Task LogIn()
    {
        try
        {
            var clientInfoFileKeyFound = TaskParameters.TryGet<string>(SpotifyParameters.ClientInfoPath, out var clientInfoPath);
            ClientInfo clientInfo;
            Result<string> clientInfoResult;
            if (clientInfoFileKeyFound && (clientInfoResult = await files.TryGetAsync(clientInfoPath, CachePolicy.PreferActual).WithoutContextCapture()).DidFind)
            {
                clientInfo = clientInfoResult.ResultValue.FromJsonString<ClientInfo>();
            }
            else
            {
                var clientId = await ui.RequestResponseAsync("Please provide the client ID").WithoutContextCapture();
                var clientSecret = await ui.RequestResponseAsync("Please provide the client secret").WithoutContextCapture();
                clientInfo = new ClientInfo { ClientId = clientId, ClientSecret = clientSecret };
            }
            var redirectUriFound = TaskParameters.TryGet<string>(SpotifyParameters.RedirectUri, out var redirectUri);
            if (!redirectUriFound)
                redirectUri = await ui.RequestResponseAsync("Please provide the redirect Uri").WithoutContextCapture();
            await spotifyAuthenticator.LogIn(new AuthorizationSource { ClientInfo = clientInfo, RedirectUriString = redirectUri, Scopes = SpotifyConstants.AllAuthenticationScopes });
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging in: {exception}", e);
            throw;
        }
    }

    private async Task LogOut()
    {
        try
        {
            await spotifyAuthenticator.LogOut().WithoutContextCapture();
            RefreshState();
        }
        catch (Exception e)
        {
            Logger.Error("An exception occurred while logging out: {exception}", e);
            throw;
        }
    }

    protected override async Task OnInitializedAsync()
	{
        await spotifyAuthenticator.TryImmediateLogIn().WithoutContextCapture();
        RefreshState();
	}

    private void RefreshState()
    {
        isLoggedIn = spotifyAuthenticator.IsLoggedIn;
        username = spotifyProvider.CachedUserInfo?.DisplayName;
    }
}

